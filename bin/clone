#!/bin/bash

repoName=${1:-}

clone_repo() {
    local repoUrl=${REPO_URL:-}
    local userName=${REPO_USERNAME:-}
    local repoName=${REPO_NAME:-}
    local use_git=${USE_GIT:-"true"}
    if [[ ${repoUrl} != "" ]]; then
        git clone ${repoUrl}
    elif [[ ${use_git} != "true" ]]; then
        url = "https://github.com/${userName}/${repoName}"
        git clone ${url} ${repoName}
    else
        gh repo clone ${userName}/${repoName}
    fi
    cd ${repoName} || return
    parent=$(curl -s "https://api.github.com/repos/${userName}/${repoName}" | jq -r .parent.clone_url)
    echo $parent
    if [[ ${parent} == "null" ]]; then
        return
    fi
    if [[ $(git remote -v | grep "upstream") != "" ]]; then
        return
    fi
    username=$(echo $url | sed -n 's|.*github.com/\([^/]*\)/.*|\1|p')
    repo=$(echo $url | sed -n 's|.*/\([^/]*\)\.git|\1|p')
    git remote add upstream "git@github.com:${username}/${reponame}.git"
}

if [[ $repoName == "" ]]; then
    get_repo_list() {
        org=${1:-metal3-io}
        cache_file="$HOME/.${org}.github"
        if [ -f ${cache_file} ]; then
            age=$(($(date +%s) - $(date +%s -r "$cache_file")))
            if [[ ! age -gt 86400*7 ]]; then
                data=$(cat ${cache_file})
                if [[ "${data}" != "" ]]; then
                    echo "${data}"
                    return
                fi
            fi
        fi
        repos=$(gh repo list ${org} --limit 400 --json url | jq -r '.[].url')
        echo ${repos} >> ${cache_file}
        echo ${repos}
    }

    # repo=$(echo "$(get_repo_list "nordix")/ /\n/" | fzf)
    repos=$(get_repo_list "nordix")
    repo=$(echo "${repos}" | sed 's/ /\n/g' | fzf)

    REPO_URL=$repo clone
    exit 0
fi

REPO_LIST=repos.txt
source "${DOTFILES_DIR}/bin_lib/fzf_lib.sh"
repoLink=$(choose $REPO_LIST $repoName)
echo $repoLink
if [[ $repoLink != "" ]]; then
    REPO_URL=$repoLink clone
    exit 0
fi
REPO_USERNAME="Nordix" REPO_NAME=${repoName} clone_repo
